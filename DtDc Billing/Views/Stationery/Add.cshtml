@model DtDc_Billing.Models.StationaryModel


@{
    ViewBag.Title = "Add";
    Layout = "~/Views/Shared/AdminLayout.cshtml";
}

<link href="~/admin-lte/bower_components/bootstrap-datepicker/dist/css/bootstrap-datepicker.min.css" rel="stylesheet" />
<script src="~/admin-lte/bower_components/bootstrap-datepicker/dist/js/bootstrap-datepicker.min.js"></script>
<style>
    #temprecdate {
        border-radius: 0 !important;
    }

    .input-group-addon {
        border-radius: 0 !important;
    }

    .dow, .prev, .datepicker-switch, .next {
        border-right: 0 !important;
    }
</style>

<div class="content-wrapper">
    <!-- Main content -->

    <div class="box" style="padding: 16px 15px">
        <!-- column -->
        <div class="box-header with-border">
            <h4>
                Add Stationary
                <a href="https://www.youtube.com/watch?v=C04np8aEHDo&list=PLT-Gd9X3Y1afr1FZRb8Z8ELFncnWwOhzz&index=6" target="_blank" data-toggle="tooltip" title="Click to view more info">
                    @*<i class="fa fa-eye"></i>*@
                    <i class="fa fa-info-circle" style="font-size:25px;"></i>
                </a>
            </h4>
        </div><!-- /.box-header -->
        <div class="box-body">
            <div class="row">
                <!-- Horizontal Form -->
                <div class="col-md-12">
                    @if (ViewBag.Message != null)
                    {

                        string successMessage = ViewBag.Message;

                        if (!string.IsNullOrEmpty(successMessage))
                        {
                            @Html.Partial("~/Views/Shared/AlertPartial.cshtml", new Tuple<string, string>("success", successMessage))
                        }

                    }
                    @if (TempData["duplicateError"] != null)
                    {

                        <div class="alert alert-danger">
                            <span class="text-danger"> <strong>Error!</strong> @TempData["duplicateError"]</span>
                        </div>

                    }



                    @using (Html.BeginForm())
                    {
                        @Html.AntiForgeryToken()

                        <!-- Main content -->
                        <!-- form start -->
                        <form class="form-horizontal">


                            <div class="row">
                                <div class="form-group ">
                                    <div class="col-md-7" style="margin-bottom:20px">
                                        <div class="row">
                                            <div class="col-md-3">
                                                <label for="receipt-date" class=" control-label">Receipt Date<span style="color:red">*</span></label>
                                            </div>
                                            <div class="col-md-9">
                                                <div class="input-group date">
                                                    <div class="input-group-addon">
                                                        <i class="fa fa-calendar"></i>
                                                    </div>
                                                    @*<input type="text" class="form-control pull-right" id="datepicker">*@
                                                    @Html.EditorFor(model => model.temprecdate, new { htmlAttributes = new { @class = "form-control pull-right", @required = "required" } })
                                                    @Html.ValidationMessageFor(model => model.temprecdate, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                        </div>


                                    </div>
                                </div>
                                <div class="form-group" style="margin-bottom:20px">
                                    <div class="col-md-7" style="margin-bottom:20px">
                                        <div class="row">
                                            <div class="col-md-3">
                                                <label for="start-no" class=" control-label">Start No<span style="color:red">*</span></label>
                                            </div>
                                            <div class="col-md-9">
                                                @*<input type="text" class="form-control" id="start-no" placeholder="Start No">*@
                                                @Html.EditorFor(model => model.startno, new { htmlAttributes = new { @class = "form-control", @required = "required" } })
                                                @Html.ValidationMessageFor(model => model.startno, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="form-group" style="margin-bottom:20px">
                                    <div class="col-md-7" style="margin-bottom:20px">
                                        <div class="row">
                                            <div class="col-md-3">
                                                <label for="end-no" class=" control-label">End No<span style="color:red">*</span></label>
                                            </div>
                                            <div class="col-md-9">
                                                @*<input type="text" class="form-control" id="end-no" placeholder="End No">*@
                                                @Html.EditorFor(model => model.endno, new { htmlAttributes = new { @class = "form-control", @required = "required" } })
                                                @Html.ValidationMessageFor(model => model.endno, "", new { @class = "text-danger" })
                                                <span id="lblError1" style="color:red"></span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="form-group" style="margin-bottom:20px">
                                    <div class="col-md-7" style="margin-bottom:20px">
                                        <div class="row">
                                            <div class="col-md-3">
                                                <label for="leafs-no" class=" control-label">No of Leafs</label>
                                            </div>
                                            <div class="col-md-9">
                                                @*<input type="text" class="form-control" id="leafs-no" placeholder="No of Leafs">*@
                                                @Html.EditorFor(model => model.noofleafs, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                                @Html.ValidationMessageFor(model => model.noofleafs, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="form-group" style="margin-bottom:20px">
                                    <div class="col-md-7" style="margin-bottom:20px">
                                        <div class="row">
                                            <div class="col-md-3">
                                                <label for="book-no" class=" control-label">No of Books</label>
                                            </div>
                                            <div class="col-md-9">
                                                @Html.EditorFor(model => model.noofbooks, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                                @Html.ValidationMessageFor(model => model.noofbooks, "", new { @class = "text-danger" })

                                                @*<input type="text" class="form-control" id="book-no" placeholder="No of Books">*@
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-7">
                                    <div class="box-footer pull-right">
                                        <button type="submit" class="btn btn-primary" value="Save" name="Save">Save</button>
                                        <button type="submit" class="btn btn-success" value="Print" name="Submit">Save & Print</button>
                                    </div>
                                </div>

                            </div>





                            <!-- select -->
                            @*<div class="form-group">
                                    <label class=" control-label">MF Code</label>
                                    <div class="">
                                        @Html.TextBox("Pf_code", (string)ViewBag.Pf_code, new { @class = "form-control", @readonly = "readonly"})
                                        @Html.DropDownList("Pf_code", null, htmlAttributes: new { @class = "form-control input-sm" })
                                        @Html.ValidationMessageFor(model => model.Pf_code, "", new { @class = "text-danger" })
                                    </div>
                                </div>*@

                            <!-- /.box-body -->
                            <!-- /.box-footer -->
                        </form>

                        <!-- /.box -->

                        <!--/.col (right) -->

                        <!-- /.row -->


                        <!-- /.content -->
                    }
                </div>


            </div>
        </div>

    </div>



</div>





@*<script>
        $(document).ready(function () {

            lblError1.innerHTML = "";
            $('#startno').keyup(function () {
                //alert("Keyup");
                $('#endno').val('');
                $('#startno').val($(this).val().toUpperCase());
                var startno = $("#startno").val();
                if (startno.length >= 9) {
                    $('#endno').focus();
                }

            });

            $('#endno').keyup(function () {
                //alert("Keyup");

                $('#endno').val($(this).val().toUpperCase());

                var endno = $("#endno").val();
                var startno = $("#startno").val();

                var firstchastart = startno.charAt(0);
                var firstcharend = endno.charAt(0);

                if (firstchastart != firstcharend) {
                    $('#endno').val('');
                }
                else if (endno.length >= 9) {
                    $('#noofleafs').focus();
                    setleaf();
                }

                var total = $('#noofleafs').val();
                if (total > 1000) {
                    lblError1.innerHTML = "Max limit is 1000";
                }
                else {
                    lblError1.innerHTML = "";
                }

            });


            function setleaf() {

                var startno = $("#startno").val();
                var endno = $("#endno").val();
                calstart = startno.substring(1);
                calend = endno.substring(1);
                if (startno.toUpperCase().startsWith("7X") && endno.toUpperCase().startsWith("7X")) {
                    // Extract substring starting from the third character
                    calstart = startno.substring(2);
                    calend = endno.substring(2);
                }
                else if (startno.toUpperCase().startsWith("7D") && endno.toUpperCase().startsWith("7D")) {
                    // Extract substring starting from the third character
                    calstart = startno.substring(2);
                    calend = endno.substring(2);
                }
                else {
                    calstart = startno.substring(1);
                    calend = endno.substring(1);
                }



                var leafs = parseInt("0" + calend) - parseInt("0" + calstart) + 1;

                $('#noofleafs').val(leafs);

                var noofleafs = Math.ceil(leafs / 50);

                $('#noofbooks').val(noofleafs);



            }
        });



        $('#temprecdate').datepicker({
            autoclose: true,
            format: 'dd-mm-yyyy',

        });
        var currentDate = new Date();
        $("#temprecdate").datepicker("setDate", currentDate);


    </script>*@


<script>
    $(document).ready(function () {

        lblError1.innerHTML = "";

        // Handle keyup for the start number input
        $('#startno').keyup(function () {
            $('#endno').val('');
            $('#startno').val($(this).val().toUpperCase());
            var startno = $("#startno").val();
          
        });

        // Handle keyup for the end number input
        $('#endno').focusout(function () {
            $('#endno').val($(this).val().toUpperCase());

            var endno = $("#endno").val();
            var startno = $("#startno").val();

            // Check if the first characters match
            var firstchastart = startno.charAt(0);
            var firstcharend = endno.charAt(0);

            // Reset the end number if the first characters don't match
            if (firstchastart !== firstcharend) {
                $('#endno').val('');
            }
           
                setleaf();
            

            var total = $('#noofleafs').val();
            if (total > 1000) {
                lblError1.innerHTML = "Max limit is 1000";
            } else {
                lblError1.innerHTML = "";
            }
        });

        // Function to calculate leafs and books
        function setleaf() {
            var startno = $("#startno").val();
            var endno = $("#endno").val();

            // Handle if the input starts with "7X" or "7D"
            var calstart = getSubstring(startno);
            var calend = getSubstring(endno);

            // Calculate the number of leafs
            var leafs = parseInt(calend, 10) - parseInt(calstart, 10) + 1;

            // Set the value for leafs and books
            $('#noofleafs').val(leafs);

            var noofleafs = Math.ceil(leafs / 50);
            $('#noofbooks').val(noofleafs);
        }

        // Function to handle substring extraction
        function getSubstring(input) {
            if (input.toUpperCase().startsWith("7X") || input.toUpperCase().startsWith("7D")) {
                return input.substring(2); // Extract from the third character
            } else if (/^[A-Za-z0-9]/.test(input.charAt(0))) {
                return input.substring(1); // Extract from the second character
            }
            return input; // Default case for numbers or other patterns
        }

    });

    // Initialize datepicker for the date field
    $('#temprecdate').datepicker({
        autoclose: true,
        format: 'dd-mm-yyyy',
    });

    // Set current date on page load
    var currentDate = new Date();
    $("#temprecdate").datepicker("setDate", currentDate);

</script>
